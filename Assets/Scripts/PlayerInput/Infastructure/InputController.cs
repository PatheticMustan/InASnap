//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/PlayerInput/Infastructure/InputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputController"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""bf266c37-3a7c-4578-95b9-f59917dfe09f"",
            ""actions"": [
                {
                    ""name"": ""APress"",
                    ""type"": ""Button"",
                    ""id"": ""b6db7f0e-a4a3-492d-94c1-7e0e8e343d85"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BPress"",
                    ""type"": ""Button"",
                    ""id"": ""db6a507a-6119-4cb4-b30c-827f54cc1177"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Direction"",
                    ""type"": ""Value"",
                    ""id"": ""ecb18dab-cc9d-4274-ad3a-25337954b435"",
                    ""expectedControlType"": ""Dpad"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""af59e108-0297-4e84-9cdb-a26ec6be1a19"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""APress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b6b64e0-d386-4a8d-9b5e-3b88d678dce5"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""BPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Dir"",
                    ""id"": ""4e6cb025-7d9f-414f-9702-5722aacb76a5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""924be435-c58c-4ab9-a001-053571a25040"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""266f7766-f4a1-4b5e-8c54-c96acceb0c13"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7aafb97d-8ded-4f17-8dd8-acde7c4e3ae8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e62d2a2d-21c0-4bd8-b3d4-8b4befadaf33"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Editor"",
            ""id"": ""86e8d632-9d44-4ad2-8002-2cff07995d37"",
            ""actions"": [
                {
                    ""name"": ""PressRight"",
                    ""type"": ""Button"",
                    ""id"": ""774265e7-032c-4761-aaf7-82bb10ec74e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldRight"",
                    ""type"": ""Button"",
                    ""id"": ""3df9799e-325e-4a5e-bf10-4490cfd40d16"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePos"",
                    ""type"": ""Value"",
                    ""id"": ""556dfb92-15d8-480e-8da9-a43179a78313"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b74a2c12-1c28-4d30-9e2c-ea40c73a1674"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0bff3a29-3a46-4c88-961f-07b2c491f631"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eea8c59d-69e7-4652-aaeb-19d2cf0e2d06"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PressRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": []
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_APress = m_Player.FindAction("APress", throwIfNotFound: true);
        m_Player_BPress = m_Player.FindAction("BPress", throwIfNotFound: true);
        m_Player_Direction = m_Player.FindAction("Direction", throwIfNotFound: true);
        // Editor
        m_Editor = asset.FindActionMap("Editor", throwIfNotFound: true);
        m_Editor_PressRight = m_Editor.FindAction("PressRight", throwIfNotFound: true);
        m_Editor_HoldRight = m_Editor.FindAction("HoldRight", throwIfNotFound: true);
        m_Editor_MousePos = m_Editor.FindAction("MousePos", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_APress;
    private readonly InputAction m_Player_BPress;
    private readonly InputAction m_Player_Direction;
    public struct PlayerActions
    {
        private @InputController m_Wrapper;
        public PlayerActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @APress => m_Wrapper.m_Player_APress;
        public InputAction @BPress => m_Wrapper.m_Player_BPress;
        public InputAction @Direction => m_Wrapper.m_Player_Direction;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @APress.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAPress;
                @APress.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAPress;
                @APress.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAPress;
                @BPress.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBPress;
                @BPress.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBPress;
                @BPress.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBPress;
                @Direction.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDirection;
                @Direction.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDirection;
                @Direction.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDirection;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @APress.started += instance.OnAPress;
                @APress.performed += instance.OnAPress;
                @APress.canceled += instance.OnAPress;
                @BPress.started += instance.OnBPress;
                @BPress.performed += instance.OnBPress;
                @BPress.canceled += instance.OnBPress;
                @Direction.started += instance.OnDirection;
                @Direction.performed += instance.OnDirection;
                @Direction.canceled += instance.OnDirection;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Editor
    private readonly InputActionMap m_Editor;
    private IEditorActions m_EditorActionsCallbackInterface;
    private readonly InputAction m_Editor_PressRight;
    private readonly InputAction m_Editor_HoldRight;
    private readonly InputAction m_Editor_MousePos;
    public struct EditorActions
    {
        private @InputController m_Wrapper;
        public EditorActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @PressRight => m_Wrapper.m_Editor_PressRight;
        public InputAction @HoldRight => m_Wrapper.m_Editor_HoldRight;
        public InputAction @MousePos => m_Wrapper.m_Editor_MousePos;
        public InputActionMap Get() { return m_Wrapper.m_Editor; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EditorActions set) { return set.Get(); }
        public void SetCallbacks(IEditorActions instance)
        {
            if (m_Wrapper.m_EditorActionsCallbackInterface != null)
            {
                @PressRight.started -= m_Wrapper.m_EditorActionsCallbackInterface.OnPressRight;
                @PressRight.performed -= m_Wrapper.m_EditorActionsCallbackInterface.OnPressRight;
                @PressRight.canceled -= m_Wrapper.m_EditorActionsCallbackInterface.OnPressRight;
                @HoldRight.started -= m_Wrapper.m_EditorActionsCallbackInterface.OnHoldRight;
                @HoldRight.performed -= m_Wrapper.m_EditorActionsCallbackInterface.OnHoldRight;
                @HoldRight.canceled -= m_Wrapper.m_EditorActionsCallbackInterface.OnHoldRight;
                @MousePos.started -= m_Wrapper.m_EditorActionsCallbackInterface.OnMousePos;
                @MousePos.performed -= m_Wrapper.m_EditorActionsCallbackInterface.OnMousePos;
                @MousePos.canceled -= m_Wrapper.m_EditorActionsCallbackInterface.OnMousePos;
            }
            m_Wrapper.m_EditorActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PressRight.started += instance.OnPressRight;
                @PressRight.performed += instance.OnPressRight;
                @PressRight.canceled += instance.OnPressRight;
                @HoldRight.started += instance.OnHoldRight;
                @HoldRight.performed += instance.OnHoldRight;
                @HoldRight.canceled += instance.OnHoldRight;
                @MousePos.started += instance.OnMousePos;
                @MousePos.performed += instance.OnMousePos;
                @MousePos.canceled += instance.OnMousePos;
            }
        }
    }
    public EditorActions @Editor => new EditorActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnAPress(InputAction.CallbackContext context);
        void OnBPress(InputAction.CallbackContext context);
        void OnDirection(InputAction.CallbackContext context);
    }
    public interface IEditorActions
    {
        void OnPressRight(InputAction.CallbackContext context);
        void OnHoldRight(InputAction.CallbackContext context);
        void OnMousePos(InputAction.CallbackContext context);
    }
}
